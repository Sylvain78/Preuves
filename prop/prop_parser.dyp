{
 open Formula_prop
 let local_data = []
 let parser = ref None;;
 let string_without_quote s = ( String.sub s 1 (String.length s - 2))
}

%start expr1
%start notation1
%layout [' ' '\t' '\n']

%lexer

let lowercase = ['a'-'z']
let uppercase = ['A'-'Z']
let digit = ['0'-'9']
let ident = (lowercase|uppercase)(lowercase|uppercase|digit)*
let any_string = '"' (['\000'-'\033'] | ['\035'-'\255'])* '"'

%parser
/*
Load the parser at beginning of parsing*/
expr1 : 
	| ...@{(),match !parser with | None -> [] | Some pdev -> [Parser pdev] } expr eof { $2 }

notation1 :
	| ...@{(),match !parser with | None -> [] | Some pdev -> [Parser pdev] } notation { $2 }

expr:
	| "X_" ['0'-'9']+  { PVar (int_of_string $2) }
	| "X_{" ['0'-'9']+ "}" { PVar (int_of_string $2) }
	| "(" expr ")" { $2 }
	| "\\lnot" expr { PNeg($2) }
	| expr "\\implies" expr { PImpl($1,$3) }
	| expr "\\land" expr { PAnd($1,$3) }
	| expr "\\lor" expr { POr($1,$3) }

/*SKE Example of notation
"
Notation equiv
Params a b
a \equiv b 
(a \imply b)/\\(b \imply a)
End
"
*/

notation:
	| "Notation"  ['a'-'z']+ '\n'
	"Param" param_list '\n'
	"Syntax" syntax '\n' /*Extract params list*/
	"Semantics" semantique
	"End" ...@{
		let rec notation_elements_to_regexp = function 
		| [] -> []
		| Param _ ::l -> (Dyp.Non_ter("expr", Dyp.No_priority)) :: notation_elements_to_regexp l
		| String s ::l -> print_string ("XXX"^s^"XXX"^"\n");
		                  Dyp.Regexp(Dyp.RE_String s) :: notation_elements_to_regexp l
		in
		let notation = 
			{
			   notation_prop_name = $2;
			   notation_prop_params = $5;
			   notation_prop_notation = $8;
			   notation_prop_semantique = $11; 
			}	
		in
		let rule       = ("expr", notation_elements_to_regexp $8, "default_priority",[]) 
		and action _ l = Obj_expr (Apply_notation({apply_notation_prop= notation; apply_notation_prop_params= List.map (function Obj_expr e -> e | _ -> assert false) (List.filter (function Obj_expr _ -> true | _ -> false) l) })), [ ] 
		in
		notation, 
		[ Dyp.Add_rules [(rule,action)] ; Dyp.Keep_grammar]
    	} 
    
    {parser := Some dyp.parser_pilot.pp_dev; $13}


param_list: 
	| param* { $1 }
param :
	ident { Param $1 }
syntax:
	| term_syntax+   { $1 }
term_syntax:
	| ident { Param $1 }
    	| any_string { print_string ("YYY" ^ $1 ^ "YYY" ^ "\n");String (string_without_quote $1) }

semantique:
	|  syntax  { $1 }

%%

{
let formula_from_string s = 
   let l = (expr1 (Dyp.from_string (pp ()) s))
   in 
   match l with [ (f,s) ] -> f 
              |   _   -> raise (Failure "[Prop] Parser.formula_from_string")

let notation_from_string s =	      
   let l = (notation1 (Dyp.from_string (pp ()) s))
   in 
   match l with [ (n,_) ] -> n 
              |   _   -> raise (Failure "[Prop] Parser.notation_from_string")
} 
%mli {
val formula_from_string : string -> Formula_prop.formula_prop 
val notation_from_string : string -> Formula_prop.notation_prop
}
