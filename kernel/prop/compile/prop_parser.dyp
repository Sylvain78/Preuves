{
open Formula_prop
 let parser = ref None;;
 let string_without_quote s = ( String.sub s 1 (String.length s - 2))

(*keep all interpretations*)
(* let dyp_merge_Obj_expr l = match l with
   | (_,gd,ld)::_ -> List.map (fun (o,_,_) -> o) l, gd, ld
   | [] -> assert false
*)
}

%start main
%layout [' ' '\t' '\n']

%lexer

let lowercase = ['a'-'z']
let uppercase = ['A'-'Z']
let digit = ['0'-'9']
let ident = (lowercase|uppercase)(lowercase|uppercase|digit)*
let any_string = '"' (['\000'-'\033'] | ['\035'-'\255'])* '"'

%parser

main:
| expr eof { $1 }
| notation eof  { $1 }

expr:
    | "X_" ['0'-'9']+  { PVar (int_of_string $2) }
    | "X_{" ['0'-'9']+ "}" { PVar (int_of_string $2) }
    | "\\mathbf{" ['a'-'z''A'-'Z'] "}" { PMetaVar ($2) }
    | "(" expr ")" { $2 }
    | "\\lnot" expr { PNeg($2) }
    | expr "\\implies" expr { PImpl($1,$3) }
    | expr "\\land" expr { PAnd($1,$3) }
    | expr "\\lor" expr { POr($1,$3) }

/*SKE Example of notation
"
Notation
equiv
Param
a b
Syntax
a "\equiv" b
Semantics
"(" a "\imply" b ")/\\(" b "\imply" a ")"
End
"
*/

notation:
    | "Notation" '\n' ['a'-'z']+ '\n'
    "Param" '\n' param_list '\n'
    "Syntax" '\n' syntax '\n' /*Extract params list*/
    "Semantics" '\n' semantique '\n'
    "End" ...@{
        let rec notation_elements_to_regexp = function
        | [] -> []
        | Param _ ::l -> (Dyp.Non_ter("expr", Dyp.No_priority)) :: notation_elements_to_regexp l
        | String s ::l -> Dyp.Regexp(Dyp.RE_String s) :: notation_elements_to_regexp l
        in
        let notation =
            {
               notation_prop_name = $3;
               notation_prop_params = $7;
               notation_prop_notation = $11;
               notation_prop_semantique = $15;
            }
        in
        let rule       = ("expr", notation_elements_to_regexp $11, "default_priority",[])
        and action _ l = Obj_expr (PApply_notation({apply_notation_prop = notation;
						    apply_notation_prop_params = List.map (function Obj_expr e -> e | _ -> assert false)
						    				          (List.filter (function Obj_expr _ -> true | _ -> false) l)
						   })),
			 []
        in
        notation,
        [ Dyp.Add_rules [(rule,action)] ; Dyp.Keep_grammar]
        }

    { $18 }

param_list:
    | param* { $1 }
param:
    | ident { Param $1 }
syntax:
    | term_syntax+   { $1 }
term_syntax:
    | ident { Param $1 }
    | any_string { String (string_without_quote $1) }
semantique:
    |  syntax  { $1 }

%%
