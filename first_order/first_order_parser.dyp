%mltop {
 open Signature
 open Formula
 module Parser (S:SIGNATURE) = struct
 module F = Formula(S)
 type formula = F.formula
}

{
open Signature 
}


%start main
%layout [' ' '\t' '\n']

%parser
main: formula eof { $1 }


term:
	| "X_" ['0'-'9']+  {  F.V(Var (int_of_string $2)) }
	| "X_{" ['0'-'9']+ "}" { V(Var  (int_of_string $2)) }
	| "(" term ")" { $2 }

formula: 
	| term "=" term { F.Atomic_formula(F.Eq($1,$3)) }

%%
{
let formula_from_string s = 
	print_string s;flush stdout;
   let l = (main (Dyp.from_string (pp ()) s))
   in 
   match l with [ (f,s) ] -> f 
              |   _   -> raise (Failure "[First_order] Parser.formula_from_string")

end
}

%mlitop {
open Signature
module Parser : functor (S:SIGNATURE) -> sig
module F : 
sig
	type formula
	type term
end
}

%mli {
val formula_from_string : string -> F.formula
end
}
