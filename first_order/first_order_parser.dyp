%mltop {
 open Signature
 open Formula
 module Parser (S:SIGNATURE) = struct
 module G = Formula(S)

}

{
 let parser = ref None
 let string_without_quote s = ( String.sub s 1 (String.length s - 2))
}

%start <G.formula> formula1
%layout [' ' '\t' '\n']

%lexer

let lowercase = ['a'-'z']
let uppercase = ['A'-'Z']
let digit = ['0'-'9']
let ident = (lowercase|uppercase)(lowercase|uppercase|digit)*
let any_string =  '"' (['\000'-'\033'] | ['\035'-'\255'])* '"'

%parser
/*
Load the parser at beginning of parsing*/
formula1 : 
    | ...@{(),match !parser with | None -> [] | Some pdev -> [Dyp.Parser pdev] } formula eof { let module G = Formula(S) in ($2 : G.formula) }


term:
	| "X_" ['0'-'9']+  { let module G = Formula(S) in G.TV(G.Var (int_of_string $2)) }
	| "X_{" ['0'-'9']+ "}" { TV(Var  (int_of_string $2)) }
	| "(" term ")" { ($2 : G.term) }


formula: 
	| term "=" term { let module G = Formula(S) in G.FAtomic_formula(G.Eq($1,$3)) }
	| "\\forall X_" ['0'-'9']+ formula { let module G = Formula(S) in G.FForall(G.Var(int_of_string $2), $3)}
	| "\\exists X_" ['0'-'9']+ formula { let module G = Formula(S) in G.FExists(G.Var(int_of_string $2), $3)}

/*SKE Example of notation
"
Notation equiv
Param a b
a \equiv b 
(a \imply b)/\\(b \imply a)
End
"
*/
/*
notation_term:
    | "Notation Term "  ['a'-'z']+ '\n'
    "Param" param_list '\n'
    "Syntax" syntax '\n' /*Extract params list*/
    "Semantics" semantique
    "End" ...@{
 	let module G = Formula(S) in
	let rec notation_elements_to_regexp = function 
        | [] -> []
        | G.Bt.Param _ ::l -> (Dyp.Non_ter("term", Dyp.No_priority)) :: notation_elements_to_regexp l
        | G.Bt.String s ::l -> Dyp.Regexp(Dyp.RE_String s) :: notation_elements_to_regexp l
        in
        let notation = 
            {
               G.Bt.notation_first_order_name = $2;
               G.Bt.notation_first_order_params = $5;
               G.Bt.notation_first_order_notation = $8;
               G.Bt.notation_first_order_semantique = $11; 
            }    
        in
        let rule       = ("term", notation_elements_to_regexp $8, "default_priority",[]) 
        and action _ l = Obj_term (G.TApply_notation({
							G.Bt.apply_notation_first_order_term   = notation;
							G.Bt.apply_notation_first_order_term_params = List.map (function Obj_term e -> e | _ -> assert false) 
												      (List.filter (function Obj_term _ -> true | _ -> false) l) 
						     })), [] 
        in
        notation, 
        [ Dyp.Add_rules [(rule,action)] ; Dyp.Keep_grammar]
        } 
    
    {parser := Some dyp.Dyp.parser_pilot.Dyp.pp_dev; $13}

notation_formula:
    | "Notation Formula"  ['a'-'z']+ '\n'
    "Param" param_list '\n'
    "Syntax" syntax '\n' /*Extract params list*/
    "Semantics" semantique
    "End" ...@{
 	let module G = Formula(S) in
	let rec notation_elements_to_regexp = function 
        | [] -> []
        | G.Bt.Param _ ::l -> (Dyp.Non_ter("formula", Dyp.No_priority)) :: notation_elements_to_regexp l
        | G.Bt.String s ::l -> Dyp.Regexp(Dyp.RE_String s) :: notation_elements_to_regexp l
        in
        let notation = 
            {
               G.Bt.notation_first_order_name = $2;
               G.Bt.notation_first_order_params = $5;
               G.Bt.notation_first_order_notation = $8;
               G.Bt.notation_first_order_semantique = $11; 
            }    
        in
        let rule       = ("formula", notation_elements_to_regexp $8, "default_priority",[]) 
        and action _ l = Obj_formula (G.FApply_notation({
							G.apply_notation_first_order   = notation;
							apply_notation_first_order_params = List.map (function Obj_formula e -> e | _ -> assert false) 
												      (List.filter (function Obj_formula _ -> true | _ -> false) l) 
						     })), [] 
        in
        notation, 
        [ Dyp.Add_rules [(rule,action)] ; Dyp.Keep_grammar]
        } 
    
    {parser := Some dyp.Dyp.parser_pilot.Dyp.pp_dev; $13}

param_list:
    | param* { $1 }
param:
    ident { G.Bt.Param $1 }
syntax:
    | term_syntax+ { $1 }
term_syntax:
    | ident { G.Bt.Param $1 }
    | any_string { G.Bt.String (string_without_quote $1) }
semantique:
    | syntax { $1 }
*/
%%
{
let formula_from_string s = 
	print_string s;flush stdout;
   let l = (formula1 (Dyp.from_string (pp ()) s))
   in 
   match l with [ (f,s) ] -> f 
              |   _   -> raise (Failure "[First_order] Parser.formula_from_string")

end
}

%mlitop {
open Signature
open Formula
module Parser : functor (S:SIGNATURE) -> sig
module G : module type of Formula(S)
}

%mli {
val formula_from_string : string -> G.formula
end 
}
